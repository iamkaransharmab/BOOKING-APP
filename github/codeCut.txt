#for Loops
//user
	var firstName string
	var lastName string
	var email string
	var userTickets uint //userTickets should be positive valuea
	//var bookings [50]string //array for booking ticket logic
	var bookings []string //slice for booking //var bookings = []string{} or bookings := []string{}
	//ask user for their name
	fmt.Println("Enter your first name:")
	fmt.Scan(&firstName)

	fmt.Println("Enter your Last name:")
	fmt.Scan(&lastName)

	fmt.Println("Enter your Email address:")
	fmt.Scan(&email)

	fmt.Println("Enter your booked ticktes:")
	fmt.Scan(&userTickets)

	//Book ticket logic
	remainingTickets = remainingTickets - userTickets

	//bookings[0] = firstName + " " + lastName //refer booking array
	bookings = append(bookings, firstName+" "+lastName) //in slice we don't ned index , it just append the next value as its dynamic array //adding value is differ form array in slice but getting or retrieving a value from slide is similar

	//this is clear as commnet for now -VideoTime: 1:10
	// fmt.Printf("The whole slice: %v\n", bookings)
	// fmt.Printf("The first value: %v\n", bookings[0])
	// fmt.Printf("slice type: %T\n", bookings)
	// fmt.Printf("slice length: %v\n", len(bookings))

	// fmt.Scan(&firstName)    //user input funtion //&variable name -it helps to get input and so user can get desired outpur by giving input
	//user input funtion //&-pointer help to get input

	//RUF
	// fmt.Println(remainingTickets)
	// fmt.Println(&remainingTickets) //pointer

	// userName = "Keera"
	// userTickets = 2
	// fmt.Printf("User  %v  %v booked %v tickets and his Email addres %v.\n", firstName, lastName, userTickets, email) //%v or fmt placeholder works with fmt.Printf  -IMP*

	fmt.Printf("Thank you %v %v for booking %v tickets. You will receive a confirmation email at %v\n", firstName, lastName, userTickets, email) //%v or fmt placeholder works withme, us email) //%v or fmt placeholder works with
	fmt.Printf("%v tickets remaining for %v\n", remainingTickets, conferenceName)                                                                //%v or fmt placeholder worksiningTickets, con) //%v or fmt placeholder works
	fmt.Printf("These are all bookings: %v\n", bookings)


	//videoTime : 1:37 HRs

	/Book ticket logic
		remainingTickets = remainingTickets - userTickets

		//bookings[0] = firstName + " " + lastName //refer booking array
		bookings = append(bookings, firstName+" "+lastName) //in slice we don't ned index , it just append the next value as its dynamic array //adding value is differ form array in slice but getting or retrieving a value from slide is similar

		//this is clear as commnet for now -VideoTime: 1:10
		// fmt.Printf("The whole slice: %v\n", bookings)
		// fmt.Printf("The first value: %v\n", bookings[0])
		// fmt.Printf("slice type: %T\n", bookings)
		// fmt.Printf("slice length: %v\n", len(bookings))

		// fmt.Scan(&firstName)    //user input funtion //&variable name -it helps to get input and so user can get desired outpur by giving input
		//user input funtion //&-pointer help to get input

		//RUF
		// fmt.Println(remainingTickets)
		// fmt.Println(&remainingTickets) //pointer

		// userName = "Keera"
		// userTickets = 2
		// fmt.Printf("User  %v  %v booked %v tickets and his Email addres %v.\n", firstName, lastName, userTickets, email) //%v or fmt placeholder works with fmt.Printf  -IMP*

		fmt.Printf("Thank you %v %v for booking %v tickets. You will receive a confirmation email at %v\n", firstName, lastName, userTickets, email) //%v or fmt placeholder works withme, us email) //%v or fmt placeholder works with
		fmt.Printf("%v tickets remaining for %v\n", remainingTickets, conferenceName)                                                                //%v or fmt placeholder worksiningTickets, con) //%v or fmt placeholder works

		//we want just output with user's firstNames
		firstNames := []string{}           //slice deacalring
		for _, booking := range bookings { //for array & slices -range provide the index and value for each-element
			//in Golang, Underscore(_) used to indetify unused variables ,as act as Black Identifier
			var names = strings.Fields(booking) //strings.Fields()- spilts the string with space as separator
			firstNames = append(firstNames, names[0])
		}
		fmt.Printf("These are all bookings: %v\n", firstNames)

		//now we r gooona implement if-else statement, So we can break for loop,so if remainingTickets go out 0 then it will stop the program wiht if-else condition

		if remainingTickets == 0 {
			//end program
			fmt.Println("Our conference is booked out, Come back next year.")
			break
		} //now the htingsis when user booking gretaher than avaiable or rmeaning tikctes, the confercne dhad not ended and its givingg randome ref value,so wee need ot fix that by applying conditons  userTcikers > remainingtickets
	}

	//VideoTime 1:55-2:00
//Switch Statement
	city := "london"

	switch city {
	case "New York":
		//excutec ode for booking New York conference tickets

	case "Singapore", "Hong Kong":
		//excute code for booking Singapore & Hong Kong conference tickets

	case "London", "Berlin":
		//some code here for London & Berlin


	case "Mexico City":
		//some code here

	default:
		fmt.Println("We don't have conference in this city")
	}
